{
  Name: "rpa__cluster",
  GlobalSourceCode: "#region using\r\n\r\nusing System.Data;\r\nusing System.Collections.Generic;\r\nusing System.Data.DataSetExtensions;\r\nusing System.Linq;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\n\r\nusing AiMap.Designer.DAL;\r\n\r\n#endregion using\r\n\r\n#region excel support\r\n\r\npublic DataTable ReadExcelSheet(string excelPath, string sheetName, int fromRow = 1, int fromColumn = 1)\r\n{\r\n  DataSet dsExcel = (new ExcelLib()).GetExcelDataSetRaw(excelPath);\r\n \r\n  var dtToReturn = dsExcel.Tables[sheetName];\r\n\r\n  PrepareDataTable(dtToReturn, fromRow, fromColumn);\r\n\r\n  return dtToReturn;\r\n}\r\n  \r\nprivate void PrepareDataTable(DataTable dTable, int fromRow, int fromColumn)\r\n{\r\n  if (dTable.Prefix == \"Prepared\") {\r\n    return;\r\n  }\r\n\r\n  fromRow--;\r\n  fromColumn--;\r\n\r\n  //rename columns\r\n  if (fromRow >= 0)\r\n  {\r\n   RenameColumns(dTable, fromRow, fromColumn);\r\n  }\r\n\r\n  //Remove unused rows\r\n  for (int i = 0; i < fromRow + 1; i++)\r\n  {\r\n   dTable.Rows.RemoveAt(0);\r\n  }\r\n\r\n  //Remove unused columns\r\n  for (int i = 0; i < fromColumn; i++)\r\n  {\r\n    dTable.Columns.RemoveAt(0);\r\n  }\r\n\r\n   dTable.AcceptChanges();\r\n   dTable.Prefix = \"Prepared\";\r\n}\r\n \r\nprivate void RenameColumns(DataTable dt, int fromRow, int fromColumn)\r\n{\r\n string tentativeColumnName;\r\n\r\n for (int i = fromColumn; i < dt.Columns.Count; i++)\r\n {\r\n  tentativeColumnName = dt.Rows[fromRow][i].ToString();\r\n\r\n  if (tentativeColumnName.Length == 0)\r\n  {\r\n   break;\r\n  }\r\n  else \r\n  {\r\n   if (dt.Columns.Contains(tentativeColumnName)) {\r\n          string indexedName = string.Empty;\r\n          for (int ni = 2; ni < 256; ni++)\r\n          {\r\n            indexedName = tentativeColumnName + ni.ToString();\r\n            if (!dt.Columns.Contains(indexedName))\r\n            {\r\n              tentativeColumnName = indexedName;\r\n              break;\r\n            }\r\n          }\r\n   }\r\n\r\n   dt.Columns[i].ColumnName = tentativeColumnName;\r\n  }\r\n }\r\n}\r\n\r\n#endregion excel support\r\n\r\n\r\npublic String ConnectionString = @\"Server=tcp:rpajobs.database.windows.net,1433;Initial Catalog=rpa_jobs;Persist Security Info=False;User ID=rpa;Password=$Rp4-123;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;\";\r\n\r\n#region dataPlanRow Creation\r\n\r\n// Sube 20mil datos en 54 segundos (dependiendo la cantidad de hilos de la maquina)\r\npublic int PopulateTargetData(string excelFile, string jobName, string rowIdExpression, string workSheetName)\r\n{\r\n  int totalLoadedRows = InitiateTargetDataParallel(excelFile, jobName, workSheetName, rowIdExpression);\r\n  \r\n  Console.WriteLine(\"Uploaded [\" + totalLoadedRows + \"] records for the job [\" + jobName + \"]\");\r\n  return totalLoadedRows;\r\n}\r\n\r\npublic string DownloadExcelFromGooglePublicLink(string excelPath, string destinationPath)\r\n{\r\n    using (var client = new WebClient())\r\n    {\r\n      //make the google drive url\r\n      string googleDocID = StrBetween(excelPath, @\"/d/\", @\"/edit\");\r\n      string directDownloadPath = @\"https://drive.google.com/uc?export=download&id=\" + googleDocID; //old way\r\n      directDownloadPath = excelPath.Replace(\"edit?usp=sharing\", \"export?format=xlsx\");\r\n      \r\n      client.DownloadFile(directDownloadPath, destinationPath);\r\n      \r\n      \r\n      //client.DownloadFile(directDownloadPath, @\"C:\\Users\\GreenSQA\\Documents\\TIA\\ASIGNADOR_RPA\");\r\n      \r\n      return destinationPath;\r\n    }\r\n}\r\n  \r\n  public void DownloadFromSharePoint(string fileUrl, string filePath)\r\n    {\r\n        WebRequest request = WebRequest.Create(fileUrl);\r\n        using (WebResponse response = request.GetResponse())\r\n        using (Stream fileStream = response.GetResponseStream())\r\n        {\r\n            using (FileStream outputFileStream = new FileStream(filePath, FileMode.Create))\r\n            {\r\n                byte[] buffer = new byte[1024];\r\n                int bytesRead;\r\n                while ((bytesRead = fileStream.Read(buffer, 0, buffer.Length)) > 0)\r\n                {\r\n                    outputFileStream.Write(buffer, 0, bytesRead);\r\n                }\r\n            }\r\n        }\r\n    }\r\n  \r\npublic string ConvertRemotePathToLocalPath( string jobName)\r\n{\r\n  return Path.Combine(ThisModel.ModelDir, \"job_files\", jobName + \".xlsx\");\r\n}\r\n\r\nprivate DataTable MakeExcelDataTable(string excelPath, string sheetName, string jobName)\r\n{\r\n  DataTable dtResult = null;\r\n  \r\n  if (excelPath.ToLower().StartsWith(\"http\")) \r\n  {\r\n    string destinationPath = ConvertRemotePathToLocalPath(jobName);\r\n    Console.WriteLine(\"Remote excel downloaded to :\" + destinationPath);\r\n    DownloadExcelFromGooglePublicLink(excelPath, destinationPath);\r\n    excelPath = destinationPath;\r\n  }\r\n  \r\n  if (!File.Exists(excelPath)) {\r\n    if (String.IsNullOrEmpty(Path.GetExtension(excelPath))){\r\n      excelPath = excelPath + \".xlsx\";\r\n     }\r\n    \r\n    excelPath = Path.Combine(ThisModel.ModelDir, Path.GetFileName(excelPath));\r\n  }\r\n  \r\n  dtResult = ReadExcelSheet(excelPath, sheetName);\r\n  \r\n  return dtResult;\r\n}\r\n\r\n\r\npublic int InitiateTargetDataParallel(string excelPath, string jobName, string sheetName, string dataRowKeyExpression, int fromRow = 1, int fromColumn = 1)\r\n{\r\n  DataTable dtRegistros = MakeExcelDataTable(excelPath, sheetName, jobName);\r\n  dtRegistros.Columns.Add(\"DataRow_key\", typeof(string), dataRowKeyExpression);\r\n  int totalRows    = 0;\r\n\r\n  Console.WriteLine(\"Running parallel initialization\");\r\n  \r\n  Parallel.ForEach(dtRegistros.AsEnumerable(), xlsRow =>\r\n  {    \r\n    if (String.IsNullOrEmpty(xlsRow.Field<string>(\"DataRow_key\")))\r\n    {\r\n      return;\r\n    }\r\n    else\r\n    {      \r\n      using (var threadConn = new System.Data.SqlClient.SqlConnection(ConnectionString)) \r\n      {\r\n        threadConn.Open();\r\n        InsTargetDataRow(threadConn, xlsRow[\"DataRow_key\"].ToString(), jobName);\r\n        Interlocked.Increment(ref totalRows);\r\n      }\r\n    }\r\n  });\r\n   \r\n  Console.WriteLine(\"Total uploaded rows: \" + totalRows);\r\n\r\n  return totalRows;\r\n}\r\n\r\nprivate void InsTargetDataRow(System.Data.SqlClient.SqlConnection conn, string rowId, string dataGroupName)\r\n{\r\n  using (var cmd = new System.Data.SqlClient.SqlCommand(\"dbo.insJobTargetData\", conn)) \r\n  {\r\n    cmd.CommandType = System.Data.CommandType.StoredProcedure;\r\n    cmd.Parameters.Add(new System.Data.SqlClient.SqlParameter(\"@job_name\", dataGroupName));\r\n    cmd.Parameters.Add(new System.Data.SqlClient.SqlParameter(\"@rpa_row_key\", rowId));\r\n\r\n    cmd.ExecuteNonQuery();\r\n }\r\n}\r\n\r\nprivate void CreateTargetDataMaster(string jobName)\r\n{\r\n  using (var conn = new System.Data.SqlClient.SqlConnection(ConnectionString)) {\r\n    using (var cmd = new System.Data.SqlClient.SqlCommand(\"dbo.createDataMaster\", conn)) \r\n    {\r\n      cmd.CommandType = System.Data.CommandType.StoredProcedure;\r\n      cmd.Parameters.Add(new System.Data.SqlClient.SqlParameter(\"@job_name\", jobName));\r\n      conn.Open();\r\n      cmd.ExecuteNonQuery();\r\n   }\r\n  }\r\n}\r\n\r\nprivate void UpdateTargetDataMaster(string jobName, int totalRows)\r\n{\r\n  using (var conn = new System.Data.SqlClient.SqlConnection(ConnectionString)) {\r\n    using (var cmd = new System.Data.SqlClient.SqlCommand(\"dbo.updateDataMaster\", conn)) \r\n    {\r\n      cmd.CommandType = System.Data.CommandType.StoredProcedure;\r\n      cmd.Parameters.Add(new System.Data.SqlClient.SqlParameter(\"@job_name\", jobName));\r\n      cmd.Parameters.Add(new System.Data.SqlClient.SqlParameter(\"@total_rows\", totalRows));\r\n      conn.Open();\r\n      cmd.ExecuteNonQuery();\r\n   }\r\n  }\r\n}\r\n\r\n#endregion dataPlanRow Creation\r\n\r\n#region dataPlanRow Consumption\r\n\r\n//Seeks for a row which has a failure (works on parallel session)\r\nprivate string GetAvailableDataRowForJob(string jobName)\r\n{\r\n string rowId = \"__NO_DATA__\"; \r\n \r\n try\r\n {\r\n   using (var conn = new System.Data.SqlClient.SqlConnection(ConnectionString)) {\r\n     using (var cmd = new System.Data.SqlClient.SqlCommand( \"dbo.getAvailableDataRowForJob\", conn)) {\r\n       cmd.CommandType = System.Data.CommandType.StoredProcedure;\r\n       cmd.Parameters.Add(new System.Data.SqlClient.SqlParameter(\"@job_name\", jobName));\r\n       \r\n       //Output parameter\r\n       var rowIdPrm       = new System.Data.SqlClient.SqlParameter(\"@available_record\", System.Data.SqlDbType.NVarChar, 64);\r\n       rowIdPrm.Direction = System.Data.ParameterDirection.Output;\r\n       cmd.Parameters.Add(rowIdPrm);\r\n       \r\n\r\n       //Fetch the available data row\r\n       conn.Open();\r\n       cmd.ExecuteNonQuery();\r\n       \r\n       //Get rowId\r\n       rowId = rowIdPrm.Value.ToString();\r\n     }\r\n   }\r\n   \r\n   return rowId;\r\n  }\r\n  catch (Exception ex)\r\n  {\r\n      if (ex.Message.Contains(\"THERE ARE NO ROWS AVAILABLE FOR PROCESSING\")) {\r\n        return \"__NO_DATA__\";\r\n      }\r\n      \r\n      if (ex.Message.Contains(\"__NO_DATA_MASTER__\")) {\r\n        return \"__NO_DATA_MASTER__\";\r\n      }\r\n  \r\n      // Handle other exceptions here if needed\r\n      throw; // Re-throw the exception if not handled here\r\n  }\r\n}\r\n\r\n#endregion dataPlanRow Consumption\r\n\r\npublic void SetTargetDataJobAndRowOkay(string jobName, string rowId, string okayMessage = \"OK\")\r\n{\r\n  UpdateTargetData(jobName, rowId, \"OK\", okayMessage);\r\n}\r\n\r\npublic void SetTargetDataJobAndRowError(string jobName, string rowId, string errorMessage)\r\n{\r\n  UpdateTargetData(jobName, rowId, \"ERROR\", errorMessage);\r\n}\r\n\r\n//Refresh the status of the RowID\r\nprivate void UpdateTargetData(string jobName, string rowId, string procStatus, string procMsg)\r\n{  \r\n using (var conn = new System.Data.SqlClient.SqlConnection(ConnectionString)) {\r\n   using (var cmd = new System.Data.SqlClient.SqlCommand( \"dbo.updateTargetData\", conn)) {\r\n     cmd.CommandType = System.Data.CommandType.StoredProcedure;\r\n     \r\n     cmd.Parameters.Add(new System.Data.SqlClient.SqlParameter(\"@job_name\", jobName));    \r\n     cmd.Parameters.Add(new System.Data.SqlClient.SqlParameter(\"@rpa_row_key\", rowId));\r\n     cmd.Parameters.Add(new System.Data.SqlClient.SqlParameter(\"@rpa_status\", procStatus));\r\n     cmd.Parameters.Add(new System.Data.SqlClient.SqlParameter(\"@rpa_outcome_message\", procMsg));\r\n\r\n     conn.Open();\r\n     cmd.ExecuteNonQuery();\r\n    }\r\n  }\r\n}\r\n\r\npublic string StrBetween( string inputString, string originString, string endingString)\r\n{\r\n   var resultString = System.Text.RegularExpressions.Regex.Match(inputString, string.Format(@\"(?<={0})(.+?)(?={1})\", originString, endingString));\r\n\r\n   return resultString.Value;\r\n}",
  RobotAuthor: "earisti@greensqa.com",
  SeleniumBrowser: "Chrome Undetected",
  SeleniumScreenHeight: 1024,
  SeleniumScreenWidth: 2048,
  Stages: [
    {
      Name: "VarsCluster",
      SourceCode: "\r\n//RunAt:Desktop\r\nbool IController.Execute()\r\n{\r\n  return true;\r\n}",
      Type: "Windows",
      Image: "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",
      Steps: [
        {
          Name: "pipelineId",
          ActionType: "None"
        },
        {
          Name: "filePath",
          Value: "rpa_bot.xlsx",
          ActionType: "None",
          CustomErrorMessage: "rpa_bot.xlsx"
        },
        {
          Name: "fileSheetName",
          Value: "data",
          ActionType: "None"
        },
        {
          Name: "filePKeyExpression",
          Value: "[Id]",
          ActionType: "None"
        },
        {
          Name: "jobName",
          Value: "DEMO_ANIMALS",
          ActionType: "None"
        }
      ]
    },
    {
      Name: "VarsRPA",
      SourceCode: "\r\n//RunAt:Desktop\r\nbool IController.Execute()\r\n{\r\n  return true;\r\n}",
      Type: "Windows",
      Image: "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",
      Steps: [
        {
          Name: "vRowKey",
          Value: "3",
          ActionType: "None"
        },
        {
          Name: "vOutput",
          Value: ";OK;OK",
          ActionType: "None"
        }
      ]
    },
    {
      Name: "Controller",
      SourceCode: "//RunAt:Desktop\r\nbool IController.Execute()\r\n{\r\n  CorrerEnModoAutonomo(k.StepVal(\"VarsCluster>filePath\"), k.StepVal(\"VarsCluster>jobName\"),  k.StepVal(\"VarsCluster>filePKeyExpression\"), k.StepVal(\"VarsCluster>fileSheetName\"), 55);\r\n  k.Run(\"Controller>killDriver\");\r\n\r\n  return true;\r\n}\r\n\r\nprivate void CorrerEnModoAutonomo(string excelFile, string jobName, string rowIdExpression, string workSheetName, int timeout)\r\n{\r\n  var stopwatch = new Stopwatch();\r\n  stopwatch.Start();\r\n  \r\n  do\r\n  {\r\n    string dataRowId = k.GetAvailableDataRowForJob(jobName);\r\n    \r\n    if (dataRowId.Equals(\"__NO_DATA_MASTER__\"))\r\n    {\r\n      try //Competition for creating data master\r\n      {\r\n        Console.WriteLine(\"Creating the target data master\");\r\n        k.CreateTargetDataMaster(jobName);//this might fail, if so is because other thread is creating it\r\n        \r\n        Console.WriteLine(\"Populating the target data\");  \r\n        int totalRows = k.PopulateTargetData(excelFile, jobName, rowIdExpression, workSheetName);\r\n        k.UpdateTargetDataMaster(jobName, totalRows);\r\n        \r\n        dataRowId = k.GetAvailableDataRowForJob(jobName);\r\n      }\r\n      catch (Exception ex)\r\n      {\r\n        Console.WriteLine(\"Error creating he data master: \" + ex.Message);\r\n        Console.WriteLine(\"possibly mutex error, some other thread is creating the data_master_plan.\");\r\n\r\n        //Wait for some possible data\r\n        for (int i=0; (i<=20) && dataRowId.Equals(\"__NO_DATA__\"); i++){\r\n          dataRowId = k.GetAvailableDataRowForJob(jobName);\r\n          Console.WriteLine(\"Just waiting for available data, try # \" + i); \r\n          k.Sleep(500);\r\n        }\r\n      }\r\n    }\r\n    \r\n    if (dataRowId.Equals(\"__NO_DATA__\")){\r\n      Console.WriteLine(\"No more data for processing the job [\" + jobName + \"]\");\r\n      break;\r\n    }\r\n    \r\n    RunTheRPA(jobName, excelFile, dataRowId);\r\n  }\r\n  while(timeout > stopwatch.Elapsed.Seconds);\r\n}\r\n\r\nprivate string RunTheRPA(string jobName, string excelFile, string dataRowId)\r\n{ \r\n  Console.WriteLine(\"*********************************************\");\r\n  Console.WriteLine(\"Available datarow \" + dataRowId);\r\n  \r\n  //Parsear archivo de excel remoto\r\n  if (excelFile.ToLower().StartsWith(\"http\"))\r\n  {\r\n    string destinationPath = k.ConvertRemotePathToLocalPath(jobName);\r\n    if (!File.Exists(destinationPath))\r\n    {\r\n      k.DownloadExcelFromGooglePublicLink(excelFile, destinationPath); //no funciona, se requiere con SDK google\r\n      //k.DownloadFromSharePoint(excelFile, destinationPath); //tampoco funciona, se requiere con SDK sharepoint\r\n    }\r\n    k.SetVal(\"VarsCluster>filePath\", destinationPath);\r\n  }\r\n   \r\n  //Correr el bot\r\n  try\r\n  {\r\n    k.SetVal(\"VarsRPA>vRowKey\", dataRowId);\r\n    k.Run(\"Controller>runRPARobot\");\r\n    \r\n    if(k.StepVal(\"VarsRPA>vOutput\").Contains(\";OK;\"))\r\n    {\r\n      k.SetTargetDataJobAndRowOkay(jobName, dataRowId, k.StepVal(\"VarsRPA>vOutput\"));\r\n    }\r\n    else\r\n    {\r\n      k.SetTargetDataJobAndRowError(jobName, dataRowId, k.StepVal(\"VarsRPA>vOutput\"));\r\n    }\r\n  }\r\n  catch(Exception ex)\r\n  {\r\n    Console.WriteLine(\"Error runnig with data file path [\" + k.ThisModel.GetStep(\"Controller>runRPARobot\").ExternalMapDataFileValue + \"]\");\r\n    k.SetTargetDataJobAndRowError(jobName, dataRowId, k.StepVal(\"VarsRPA>vOutput\"));\r\n  }\r\n  \r\n  return dataRowId;\r\n}",
      Type: "Windows",
      Image: "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",
      Steps: [
        {
          Name: "runRPARobot",
          ActionType: "CallExternalMap",
          ExternalMapPath: "rpa_bot.aimj",
          ExternalMapParameters: "AUTOBIND_INOUT",
          ExternalMapExecutionScope: "RUN_ALL_MAP",
          ExternalMapDataFile: "SPECIFIED_CSV",
          ExternalMapDataFileValue: "[VarsCluster.filePath]"
        },
        {
          Name: "killDriver",
          ActionType: "SeKillDriver"
        }
      ]
    }
  ]
}